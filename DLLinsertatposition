class DoublyLinkedList {
    Node head;
    class Node {
        int data;
        Node next;
        Node prev;
        Node(int data) {
            this.data = data;
            this.next = null;
            this.prev = null;
        }
    }
    public void InsertAtPosition(int num, int position) {
        Node newNode = new Node(num);

        if (position <= 0) {
            System.out.println("Invalid position");
            return;
        }
        if (head == null && position == 1) {
            head = newNode;
            return;
        }

        Node temp = head;
        int currentPosition = 1;
        while (temp != null && currentPosition < position - 1) {
            temp = temp.next;
            currentPosition++;
        }
        if (temp == null) {
            System.out.println("Position out of range, inserting at the end.");
            InsertintoEnd(num);
            return;
        }
        newNode.next = temp.next;
        newNode.prev = temp;

        if (temp.next != null) {
            temp.next.prev = newNode; 
        }

        temp.next = newNode;  
    }
    public void InsertintoEnd(int num) {
        Node newNode = new Node(num);

        if (head == null) { 
            head = newNode;
        } else {
            Node temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newNode;
            newNode.prev = temp;  
        }
    }
    public void printalltheNodes() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;  
        }
        System.out.println(); 
    }
    public static void main(String[] args) {
        DoublyLinkedList lists = new DoublyLinkedList();
        lists.InsertintoEnd(100);  
        lists.InsertintoEnd(200);
        lists.InsertintoEnd(300);
        
        lists.InsertAtPosition(150, 2); 
        lists.InsertAtPosition(250, 4); 
        lists.InsertAtPosition(50, 1); 
        
        lists.printalltheNodes(); 
    }
}
